{"version":3,"sources":["redux/actionTypes.js","reportWebVitals.js","context/shopContext.js","components/Cart.js","redux/action.js","Products.js","App.js","redux/reducer.js","store.js","index.js"],"names":["actionType","PRODUCT_START_FETCHING","PRODUCT_FETCHED","PRODUCT_FETCH_ERROR","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ShopContext","React","createContext","client","Client","buildClient","storefrontAccessToken","domain","Component","Consumer","Cart","Products","dispatch","useDispatch","product","useSelector","state","reducerFetchAllProducts","console","log","useState","useEffect","type","fetchAll","products","data","catch","err","fetched","App","require","initalStateAllProducts","product_fetching","product_fetched","product_fetch_error","product_data","product_dataLength","reducer","combineReducers","action","length","error","middleware","applyMiddleware","thunk","createLogger","store","createStore","ReactDom","render","StrictMode","document","getElementById"],"mappings":"uHAAA,kDAAO,IAAMA,EAAa,CAExBC,uBAAwB,yBACxBC,gBAAiB,kBACjBC,oBAAqB,wB,iGCQRC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,qHCJRQ,EAAcC,IAAMC,gBAGpBC,EAASC,IAAOC,YAAY,CAChCC,sBAAuB,mCACvBC,OAAQ,6BAKiBC,YAuINR,EAAYS,S,kBC1BlBC,I,QCpHTP,EAASC,IAAOC,YAAY,CAChCC,sBAAuB,mCACvBC,OAAQ,6B,QCoBKI,MArBf,WAEE,IAAMC,EAAWC,cAEXC,EAAUC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,2BAE3CC,QAAQC,IAAIL,GAEZ,MAAkCM,mBAAS,IAA3C,mBAMA,OANA,UAEAC,qBAAU,WACRT,GDHK,SAAUA,GAEfA,EAAS,CACPU,KAAMnC,aAAWC,yBAInBe,EAAOW,QAAQS,WACd7B,MAAK,SAAC8B,GACLN,QAAQC,IAAIK,GAEZZ,EAAS,CACPU,KAAMnC,aAAWE,gBACjBoC,KAAMD,OAGTE,OAAM,SAAAC,GACLf,EAAS,CACPU,KAAMnC,aAAWG,oBACjBsC,SAAS,EACTD,IAAIA,YChBR,CAACf,IAGD,8BACE,qDCJSiB,MAdf,WAEE,OACE,+CAEE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,EAAD,Y,wBCZH1C,EAAc2C,EAAQ,IAAtB3C,WAGD4C,EAAyB,CAC7BC,kBAAkB,EAClBC,iBAAiB,EACjBC,oBAAqB,GACrBC,aAAc,GACdC,mBAAoB,GCAhBC,EAAUC,aDGuB,WAA6C,IAA5CtB,EAA2C,uDAAnCe,EAAwBQ,EAAW,uCAIjF,OAFArB,QAAQC,IAAI,aAAaoB,EAAOjB,MAExBiB,EAAOjB,MAEb,KAAKnC,EAAWC,uBAEd,OADA8B,QAAQC,IAAI,YACL,CACLa,kBAAkB,EAClBG,aAAc,IAElB,KAAKhD,EAAWE,gBAEd,OADA6B,QAAQC,IAAIoB,EAAOd,MACZ,CACLU,aAAcI,EAAOd,KACrBQ,iBAAiB,EACjBG,mBAAoBG,EAAOd,KAAKA,KAAKe,QAEzC,KAAKrD,EAAWG,oBACd,MAAO,CACL2C,iBAAiB,EACjBD,kBAAkB,EAClBE,oBAAqBK,EAAOE,OAIhC,QACE,OAAOzB,MC3BP0B,EAAaC,YAAgBC,IAAOC,0BAE7BC,EAAQC,YAAYV,EAASK,GCJ1CM,IAASC,OACP,cAAC,IAAMC,WAAP,UACA,cAAC,IAAD,CAAUJ,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGFK,SAASC,eAAe,SAM1B7D,M","file":"static/js/main.1956782e.chunk.js","sourcesContent":["export const actionType = {\n\n  PRODUCT_START_FETCHING: 'PRODUCT_START_FETCHING',\n  PRODUCT_FETCHED: 'PRODUCT_FETCHED',\n  PRODUCT_FETCH_ERROR: 'PRODUCT_FETCH_ERROR',\n\n\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { Component } from \"react\";\nimport Client from \"shopify-buy\";\n\nconst ShopContext = React.createContext();\n\n\nconst client = Client.buildClient({\n  storefrontAccessToken: 'cc92551596409162e6f510c8efd7f0b0',\n  domain: 'yw-t-shirt.myshopify.com',\n});\n\n\n\nclass ShopProvider extends Component {\n\n  state = {\n    products: [],\n    product: {},\n    checkout: {},\n    isCartOpen: false,\n    removedItem: {}\n  };\n\n  componentDidMount() {\n    // this.createCheckout();\n\n    //Check if localStorage has a checkout_id saved\n    if (localStorage.yw_store_checkout) {\n      this.fetchCheckout(localStorage.yw_store_checkout);\n    } else {\n      this.createCheckout();\n    }\n    //if there is no checkout_id in localStorage then we will create a new checkout\n\n    //else fetch the checkout from shopify\n  }\n\n  /**\n   * Store checkout id into localstorage\n   */\n  createCheckout = async () => {\n    const checkout = await client.checkout.create();\n    localStorage.setItem(\"yw_store_checkout\", checkout.id);\n    await this.setState({ checkout: checkout });\n  };\n\n  /**\n   * \n   * Fetch Checkout \n   */\n  fetchCheckout = async (checkoutId) => {\n    client.checkout\n      .fetch(checkoutId)\n      .then((checkout) => {\n        this.setState({ checkout: checkout });\n      })\n      .catch((err) => console.log(err));\n  };\n\n  /**\n   * \n   * Add Item to checkout\n   */\n  addItemToCheckout = async (variantId, quantity) => {\n\n    const lineItemsToAdd = [{ variantId, quantity: parseInt(quantity, 10)}];\n    \n    const checkout = await client.checkout.addLineItems(\n      this.state.checkout.id,\n      lineItemsToAdd\n    );\n    \n    this.setState({ checkout: checkout });\n    console.log(checkout);\n\n    this.openCart();\n  };\n\n  /**\n   * Remove Item from checkout\n   */\n  removeItemFromCheckout = async (checkoutId, lineItemIdsRemove) => {\n    \n      const lineItemIdsToRemove = [lineItemIdsRemove];\n\n      // Remove an item from the checkout\n      const checkout = client.checkout.removeLineItems(checkoutId, lineItemIdsToRemove)\n      .then((checkout) => {\n        // Do something with the updated checkout\n        console.log(checkout.lineItems); // Checkout with line item 'Z2lkOi8vc2hvcGlmeS9Qcm9kdWN0Lzc4NTc5ODkzODQ=' removed\n        console.log(checkout.lineItems.type)\n        console.log(\"LENGTH\", checkout.lineItems.length); \n      });\n\n      //this.setState({ checkout: checkout });\n      console.log(checkout);\n      \n  }\n\n\n\n  /**\n   * Fetch All Products\n   */\n  fetchAllProducts = async () => {\n    const products = await client.product.fetchAll();\n    this.setState({ products: products });\n  };\n\n  /**\n   * \n   * Fetch single product\n   */\n  fetchProductWithId = async (id) => {\n    const product = await client.product.fetch(id);\n    this.setState({ product: product });\n    //console.log(JSON.stringify(product));\n\n    return product;\n  };\n\n  closeCart = () => {\n    this.setState({ isCartOpen: false });\n  };\n  openCart = () => {\n    this.setState({ isCartOpen: true });\n  };\n\n  \n  render() {\n    return (\n      <ShopContext.Provider\n        value={{\n          ...this.state,\n          fetchAllProducts: this.fetchAllProducts,\n          fetchProductWithId: this.fetchProductWithId,\n          closeCart: this.closeCart,\n          openCart: this.openCart,\n          addItemToCheckout: this.addItemToCheckout,\n          removeItemFromCheckout: this.removeItemFromCheckout,\n        }}\n      >\n        {this.props.children}\n      </ShopContext.Provider>\n    );\n  }\n}\n\nconst ShopConsumer = ShopContext.Consumer;\n\nexport { ShopConsumer, ShopContext };\n\nexport default ShopProvider;","import {useContext, useEffect, useState} from 'react';\nimport {ShopContext} from '../context/shopContext';\nimport Loading from '../components/Loading';\nimport {TiDeleteOutline} from 'react-icons/ti';\nimport {GrFormAdd} from 'react-icons/gr';\nimport {BiMinus} from 'react-icons/bi';\n\n\nfunction Cart() {\n\nconst { checkout, addItemToCheckout, removeItemFromCheckout } = useContext(ShopContext)\n\nconsole.log(checkout);\nconsole.log(checkout && checkout === !undefined && checkout.lineItems);\n\nconst [lineItems, setLineItems] = useState([]);\nconst [totalAmount, setTotalAmount] = useState(0);\nconst [currency, setCurrency] = useState('');\nconst [length, setLength] = useState(0);\n\n\n/** \n * state checkout line items\n * state total Amount of the Checkout items\n*/\nuseEffect(()=>{\n  checkout && checkout !== undefined && setLineItems(checkout.lineItems);\n  checkout && checkout !== undefined && setTotalAmount(checkout.totalPriceV2);\n},[checkout]);\n\n\n/** State Currency Code */\nuseEffect(()=>{\n  totalAmount !== undefined && setCurrency(totalAmount.currencyCode);\n},[totalAmount])\n\n/** item length */\nuseEffect(()=>{\n  lineItems !== undefined && lineItems.length < 1 && setLength(lineItems.length);\n},[lineItems])\n\n\n// console.log(\"Line items\", lineItems !== undefined && lineItems.length );\n// console.log(\"checkoutData\", checkout !== undefined && checkoutData);\n// console.log(\"checkoutData\", checkout !== undefined && totalAmount);\n// console.log(\"checkoutData\", checkout !== undefined && currency);\nconsole.log(\"LENGTH\",length);\n\n\n    lineItems !== undefined \n    && lineItems.length < 1 \n    && <Loading />\n    return (\n      <div className=\"w-full flex flex-col p-4 my-3 border-2 border-gray-300\">\n        <h2 className=\"text-xl\">Cart Items:{length}</h2>\n        {lineItems !== undefined && lineItems.length > 0 \n        ? lineItems.map((item)=> {\n          \n          const {variant:{price:rate, id:pid}, quantity: qty, title} = item;\n          const amt = rate * qty;\n          console.log(\"product id\", pid, \"checkoutid\", checkout.id);\n          \n        return <div className=\"flex flex-row flex-wrap\">\n            <div className=\"m-10\">\n              <div>\n                <h3 className=\"text-xl py-1 mb-1\">{title}</h3>\n                <div className={`cursor-pointer relative`}>\n                  <div \n                  title=\"Remove\"\n                  onClick={ () => removeItemFromCheckout(checkout.id, item.id)}>\n                    <TiDeleteOutline />\n                  </div>\n                </div>\n                <img\n                  className=\"w-56 mt-1 p-2\" \n\n                  src={item.variant.image.src}  \n                  alt={item.variant.image.altText} />\n                \n                <div className=\"grid grid-flow-row gap-2 w-full\">\n                  <div>Description: {item.variant.title}</div>\n                  <div className=\"grid grid-col-3 gap-2 my-2\">\n                    <p>Quantity: {qty} </p>\n                    \n                    <p \n                    className=\"cursor-pointer p-2 m-2\" \n                    onClick={() => addItemToCheckout(pid, 1)} ><GrFormAdd /></p>\n                    \n                    { qty > 1 ?\n                    <p \n                    className=\"cursor-pointer p-2 m-2\" \n                    onClick={() => addItemToCheckout(pid, -1)} ><BiMinus /></p>\n                    : <p \n                    className=\"cursor-pointer p-2 m-2\" \n                    onClick={() => addItemToCheckout(pid, -1)} ><BiMinus /></p>\n                    }\n                  </div>\n                  <div>Rate: {currency} {rate}</div>\n                  <div>Amount: {currency} {amt.toFixed(2)}</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        })\n        : <div>\n          <div className=\"text-xl p-2\">Cart is empty</div>\n          </div> \n        }\n        <div class=\"font-bold mt-2\">Total Amount : {currency} {totalAmount !== undefined && totalAmount.amount}</div>\n        <div>\n          { checkout !== undefined && lineItems !== undefined && lineItems.length > 0\n            && <div \n            className=\"cursor-pointer py-2 px-4 my-5 border-gray-500\"\n            onClick={() => window.open(checkout.webUrl, '_blank')} >\n              Checkout\n            </div>\n          }\n        </div>\n      </div>\n    )\n}\n\nexport default Cart","import {actionType} from './actionTypes';\nimport Client from 'shopify-buy';\n\n\n\n// Initializing a client to return content in the store's primary language\nconst client = Client.buildClient({\n  storefrontAccessToken: 'cc92551596409162e6f510c8efd7f0b0',\n  domain: 'yw-t-shirt.myshopify.com',\n});\n\n\n//export const actionNav = () => {\nexport const actionFetchAllProduct = () => {\n\n  return function (dispatch) {\n    \n    dispatch({\n      type: actionType.PRODUCT_START_FETCHING\n    })\n\n    //Fetch all products in your shop\n    client.product.fetchAll()\n    .then((products) => {\n      console.log(products);\n      //Do something with the products\n      dispatch({\n        type: actionType.PRODUCT_FETCHED,\n        data: products\n      })\n    })\n    .catch(err => {\n      dispatch({ \n        type: actionType.PRODUCT_FETCH_ERROR,\n        fetched: false,\n        err:err\n      })\n    })\n  }// action fetchAllProducts closed\n\n\n\n}","import {useEffect, useState} from 'react';\nimport Items from './components/Items';\nimport Item from './components/Item';\nimport Cart from './components/Cart';\nimport {actionFetchAllProduct} from './redux/action';\nimport {useDispatch, useSelector} from 'react-redux';\n\nfunction Products() {\n\n  const dispatch = useDispatch();\n\n  const product = useSelector(state => state.reducerFetchAllProducts);\n\n  console.log(product);\n\n  const [productId, setProductId] = useState('');\n\n  useEffect(()=>{\n    dispatch(actionFetchAllProduct());\n  },[dispatch])\n\n  return (\n    <div>\n      <h1>Shopify : REDUX </h1>\n    </div>\n  )\n}\n\nexport default Products","import {BrowserRouter, Switch } from 'react-router-dom';\nimport Products from './Products';\n\n\n\nfunction App() {\n\n  return (\n    <div>\n      shopify shop\n      <BrowserRouter>\n        <Switch>\n          <Products />\n        </Switch>\n      </BrowserRouter>\n    </div>\n  )\n}\n\nexport default App","const {actionType} = require('./actionTypes');\n\n\nconst initalStateAllProducts = {\n  product_fetching: false,\n  product_fetched: false,\n  product_fetch_error: '',\n  product_data: [],\n  product_dataLength: 0,\n}\n\nexport const reducerFetchAllProducts = (state = initalStateAllProducts, action) => {\n\n  console.log(\"REDUCER???\",action.type);\n\n  switch (action.type) {\n    \n    case actionType.PRODUCT_START_FETCHING:\n      console.log(\"fetching\");\n      return {\n        product_fetching: true,\n        product_data: []\n      }\n    case actionType.PRODUCT_FETCHED:\n      console.log(action.data);\n      return {\n        product_data: action.data,\n        product_fetched: true,\n        product_dataLength: action.data.data.length\n      }\n    case actionType.PRODUCT_FETCH_ERROR:\n      return {\n        product_fetched: false,\n        product_fetching: false,\n        product_fetch_error: action.error\n      }\n    \n    /** default state */\n    default:\n      return state;\n    }\n\n\n}\n\n\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunk from 'redux-thunk';\n\nimport {  \n  reducerFetchAllProducts,\n} from './redux/reducer';\n\nconst reducer = combineReducers(\n  reducerFetchAllProducts,\n)\n\nconst middleware = applyMiddleware(thunk, createLogger());\n\nexport const store = createStore(reducer, middleware);","import React from 'react';\nimport ReactDom from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\nimport App from './App';\nimport {Provider} from 'react-redux';\nimport {store} from './store';\n\n\n\nReactDom.render(\n  <React.StrictMode>\n  <Provider store={store}>\n    <App/>\n  </Provider>\n  </React.StrictMode>\n, document.getElementById(\"root\"));\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n/** \n * StrictMode is a tool for highlighting potential problems in an application. Like Fragment, StrictMode does not render any visible UI. It activates additional checks and warnings for its descendants.\n\nNote:\n\nStrict mode checks are run in development mode only; they do not impact the production build.\n\n*/"],"sourceRoot":""}